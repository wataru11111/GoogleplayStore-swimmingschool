##
#    This code was generated by
#    ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
#     |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
#     |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
#
#    Twilio - Verify
#    This is the public Twilio REST API.
#
#    NOTE: This class is auto generated by OpenAPI Generator.
#    https://openapi-generator.tech
#    Do not edit the class manually.
#


module Twilio
    module REST
        class Verify < VerifyBase
            class V2 < Version
                class ServiceContext < InstanceContext

                     class ApproveChallengeList < ListResource
                
                    class ApprovePasskeysChallengeRequest
                            # @param [id]: [String] A [base64url](https://base64.guru/standards/base64url) encoded representation of `rawId`.
                            # @param [raw_id]: [String] The globally unique identifier for this `PublicKeyCredential`.
                            # @param [authenticator_attachment]: [String] A string that indicates the mechanism by which the WebAuthn implementation is attached to the authenticator at the time the associated `navigator.credentials.create()` or `navigator.credentials.get()` call completes.
                            # @param [type]: [String] The valid credential types supported by the API. The values of this enumeration are used for versioning the `AuthenticatorAssertion` and `AuthenticatorAttestation` structures according to the type of the authenticator.
                            # @param [response]: [ApproveChallengeList.ApprovePasskeysChallengeRequestResponse] 
                        attr_accessor :id, :raw_id, :authenticator_attachment, :type, :response
                        def initialize(payload)
                                @id = payload["id"]
                                @raw_id = payload["raw_id"]
                                @authenticator_attachment = payload["authenticator_attachment"]
                                @type = payload["type"]
                                @response = payload["response"]
                        end
                        def to_json(options = {})
                        {
                                "id": @id,
                                "rawId": @raw_id,
                                "authenticatorAttachment": @authenticator_attachment,
                                "type": @type,
                                "response": @response,
                        }.to_json(options)
                        end
                    end

                    class ApprovePasskeysChallengeRequestResponse
                            # @param [authenticator_data]: [String] The [authenticator data](https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Authenticator_data) structure contains information from the authenticator about the processing of a credential creation or authentication request.
                            # @param [client_data_json]: [String] This property contains the JSON-compatible serialization of the data passed from the browser to the authenticator in order to generate this credential.
                            # @param [signature]: [String] An assertion signature over `authenticatorData` and `clientDataJSON`. The assertion signature is created with the private key of the key pair that was created during the originating `navigator.credentials.create()` call and verified using the public key of that same key pair.
                            # @param [user_handle]: [String] The user handle stored in the authenticator, specified as `user.id` in the options passed to the originating `navigator.credentials.create()` call. This property should contain a base64url-encoded entity SID.
                        attr_accessor :authenticator_data, :client_data_json, :signature, :user_handle
                        def initialize(payload)
                                @authenticator_data = payload["authenticator_data"]
                                @client_data_json = payload["client_data_json"]
                                @signature = payload["signature"]
                                @user_handle = payload["user_handle"]
                        end
                        def to_json(options = {})
                        {
                                "authenticatorData": @authenticator_data,
                                "clientDataJSON": @client_data_json,
                                "signature": @signature,
                                "userHandle": @user_handle,
                        }.to_json(options)
                        end
                    end


                    ##
                    # Initialize the ApproveChallengeList
                    # @param [Version] version Version that contains the resource
                    # @return [ApproveChallengeList] ApproveChallengeList
                    def initialize(version, service_sid: nil)
                        super(version)
                        # Path Solution
                        @solution = { service_sid: service_sid }
                        @uri = "/Services/#{@solution[:service_sid]}/Passkeys/ApproveChallenge"
                        
                    end
                    ##
                    # Update the ApproveChallengeInstance
                    # @param [ApprovePasskeysChallengeRequest] approve_passkeys_challenge_request 
                    # @return [ApproveChallengeInstance] Updated ApproveChallengeInstance
                    def update(approve_passkeys_challenge_request: nil
                    )

                        headers = Twilio::Values.of({'Content-Type' => 'application/x-www-form-urlencoded', })
                        headers['Content-Type'] = 'application/json'
                        
                        
                        
                        
                        payload = @version.update('POST', @uri, headers: headers, data: approve_passkeys_challenge_request.to_json)
                        ApproveChallengeInstance.new(
                            @version,
                            payload,
                            service_sid: @solution[:service_sid],
                        )
                    end

                


                    # Provide a user friendly representation
                    def to_s
                        '#<Twilio.Verify.V2.ApproveChallengeList>'
                    end
                end

                class ApproveChallengePage < Page
                    ##
                    # Initialize the ApproveChallengePage
                    # @param [Version] version Version that contains the resource
                    # @param [Response] response Response from the API
                    # @param [Hash] solution Path solution for the resource
                    # @return [ApproveChallengePage] ApproveChallengePage
                    def initialize(version, response, solution)
                        super(version, response)

                        # Path Solution
                        @solution = solution
                    end

                    ##
                    # Build an instance of ApproveChallengeInstance
                    # @param [Hash] payload Payload response from the API
                    # @return [ApproveChallengeInstance] ApproveChallengeInstance
                    def get_instance(payload)
                        ApproveChallengeInstance.new(@version, payload, service_sid: @solution[:service_sid])
                    end

                    ##
                    # Provide a user friendly representation
                    def to_s
                        '<Twilio.Verify.V2.ApproveChallengePage>'
                    end
                end
                class ApproveChallengeInstance < InstanceResource
                    ##
                    # Initialize the ApproveChallengeInstance
                    # @param [Version] version Version that contains the resource
                    # @param [Hash] payload payload that contains response from Twilio
                    # @param [String] account_sid The SID of the
                    #   {Account}[https://www.twilio.com/docs/iam/api/account] that created this ApproveChallenge
                    #   resource.
                    # @param [String] sid The SID of the Call resource to fetch.
                    # @return [ApproveChallengeInstance] ApproveChallengeInstance
                    def initialize(version, payload , service_sid: nil)
                        super(version)
                        
                        # Marshaled Properties
                        @properties = { 
                            'options' => payload['options'],
                            'sid' => payload['sid'],
                            'account_sid' => payload['account_sid'],
                            'service_sid' => payload['service_sid'],
                            'entity_sid' => payload['entity_sid'],
                            'identity' => payload['identity'],
                            'factor_sid' => payload['factor_sid'],
                            'date_created' => Twilio.deserialize_iso8601_datetime(payload['date_created']),
                            'date_updated' => Twilio.deserialize_iso8601_datetime(payload['date_updated']),
                            'date_responded' => Twilio.deserialize_iso8601_datetime(payload['date_responded']),
                            'expiration_date' => Twilio.deserialize_iso8601_datetime(payload['expiration_date']),
                            'status' => payload['status'],
                            'responded_reason' => payload['responded_reason'],
                            'details' => payload['details'],
                            'hidden_details' => payload['hidden_details'],
                            'metadata' => payload['metadata'],
                            'factor_type' => payload['factor_type'],
                            'url' => payload['url'],
                            'links' => payload['links'],
                        }
                    end

                    
                    ##
                    # @return [Hash] An object that contains challenge options. Currently only used for `passkeys`.
                    def options
                        @properties['options']
                    end
                    
                    ##
                    # @return [String] A 34 character string that uniquely identifies this Challenge.
                    def sid
                        @properties['sid']
                    end
                    
                    ##
                    # @return [String] The unique SID identifier of the Account.
                    def account_sid
                        @properties['account_sid']
                    end
                    
                    ##
                    # @return [String] The unique SID identifier of the Service.
                    def service_sid
                        @properties['service_sid']
                    end
                    
                    ##
                    # @return [String] The unique SID identifier of the Entity.
                    def entity_sid
                        @properties['entity_sid']
                    end
                    
                    ##
                    # @return [String] Customer unique identity for the Entity owner of the Challenge.
                    def identity
                        @properties['identity']
                    end
                    
                    ##
                    # @return [String] The unique SID identifier of the Factor.
                    def factor_sid
                        @properties['factor_sid']
                    end
                    
                    ##
                    # @return [Time] The date that this Challenge was created, given in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
                    def date_created
                        @properties['date_created']
                    end
                    
                    ##
                    # @return [Time] The date that this Challenge was updated, given in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
                    def date_updated
                        @properties['date_updated']
                    end
                    
                    ##
                    # @return [Time] The date that this Challenge was responded, given in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
                    def date_responded
                        @properties['date_responded']
                    end
                    
                    ##
                    # @return [Time] The date-time when this Challenge expires, given in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
                    def expiration_date
                        @properties['expiration_date']
                    end
                    
                    ##
                    # @return [String] The Status of this Challenge. One of `pending`, `expired`, `approved` or `denied`.
                    def status
                        @properties['status']
                    end
                    
                    ##
                    # @return [String] Reason for the Challenge to be in certain `status`. One of `none`, `not_needed` or `not_requested`.
                    def responded_reason
                        @properties['responded_reason']
                    end
                    
                    ##
                    # @return [Hash] Details provided to give context about the Challenge.
                    def details
                        @properties['details']
                    end
                    
                    ##
                    # @return [Hash] Details provided to give context about the Challenge.
                    def hidden_details
                        @properties['hidden_details']
                    end
                    
                    ##
                    # @return [Hash] Custom metadata associated with the challenge.
                    def metadata
                        @properties['metadata']
                    end
                    
                    ##
                    # @return [String] The Factor Type of this Challenge. Currently `push` and `totp` are supported.
                    def factor_type
                        @properties['factor_type']
                    end
                    
                    ##
                    # @return [String] The URL of this resource.
                    def url
                        @properties['url']
                    end
                    
                    ##
                    # @return [Hash] Contains a dictionary of URL links to nested resources of this Challenge.
                    def links
                        @properties['links']
                    end
                    
                    ##
                    # Provide a user friendly representation
                    def to_s
                        "<Twilio.Verify.V2.ApproveChallengeInstance>"
                    end

                    ##
                    # Provide a detailed, user friendly representation
                    def inspect
                        "<Twilio.Verify.V2.ApproveChallengeInstance>"
                    end
                end

             end
            end
        end
    end
end


